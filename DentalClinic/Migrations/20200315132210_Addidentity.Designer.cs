// <auto-generated />
using System;
using DentalClinic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DentalClinic.Migrations
{
    [DbContext(typeof(DentalClinicContext))]
    [Migration("20200315132210_Addidentity")]
    partial class Addidentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DentalClinic.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("companyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CompanyId");

                    b.ToTable("company");
                });

            modelBuilder.Entity("DentalClinic.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("doctorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnName("fatherName")
                        .HasMaxLength(50);

                    b.Property<string>("JobLocation")
                        .HasColumnName("jobLocation")
                        .HasMaxLength(50);

                    b.Property<string>("Jop")
                        .HasColumnName("jop")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("DoctorId");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("DentalClinic.Models.DrugElement", b =>
                {
                    b.Property<int>("DrugElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("drugElementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnName("companyID");

                    b.Property<int?>("DrugTypeId")
                        .IsRequired()
                        .HasColumnName("drugTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnName("price")
                        .HasColumnType("decimal(7, 2)");

                    b.HasKey("DrugElementId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DrugTypeId");

                    b.ToTable("drugElement");
                });

            modelBuilder.Entity("DentalClinic.Models.DrugType", b =>
                {
                    b.Property<int>("DrugTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("drugTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("DrugTypeId");

                    b.ToTable("drugType");
                });

            modelBuilder.Entity("DentalClinic.Models.FeeElement", b =>
                {
                    b.Property<int>("FeeElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("feeElementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Fee")
                        .IsRequired()
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("FeeTypeId")
                        .IsRequired()
                        .HasColumnName("feeTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("FeeElementId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("feeElement");
                });

            modelBuilder.Entity("DentalClinic.Models.FeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("feeTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("FeeTypeId");

                    b.ToTable("feeType");
                });

            modelBuilder.Entity("DentalClinic.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("gender");
                });

            modelBuilder.Entity("DentalClinic.Models.HistoryElement", b =>
                {
                    b.Property<int>("HistoryElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("historyElementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplyToGender")
                        .IsRequired()
                        .HasColumnName("applyToGender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("HistoryElementId");

                    b.HasIndex("ApplyToGender");

                    b.ToTable("historyElement");
                });

            modelBuilder.Entity("DentalClinic.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnName("patientID");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(70);

                    b.Property<DateTime?>("DataOfBrith")
                        .IsRequired()
                        .HasColumnName("dataOfBrith")
                        .HasColumnType("date");

                    b.Property<int?>("GenderId")
                        .IsRequired()
                        .HasColumnName("genderID");

                    b.Property<string>("Job")
                        .HasColumnName("job")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(20);

                    b.HasKey("PatientId");

                    b.HasIndex("GenderId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientCheckFee", b =>
                {
                    b.Property<int>("PatientCheckFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientCheckFeeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("FeeElementId")
                        .HasColumnName("feeElementID");

                    b.Property<int?>("PatientRegisterationCheckId")
                        .HasColumnName("patientRegisterationCheckID");

                    b.HasKey("PatientCheckFeeId");

                    b.HasIndex("FeeElementId");

                    b.HasIndex("PatientRegisterationCheckId");

                    b.ToTable("patientCheckFee");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientHistory", b =>
                {
                    b.Property<int>("PatientHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientHistoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HistoryElementId")
                        .HasColumnName("historyElementID");

                    b.Property<int?>("PatientRegisterationId")
                        .HasColumnName("patientRegisterationID");

                    b.HasKey("PatientHistoryId");

                    b.HasIndex("HistoryElementId");

                    b.HasIndex("PatientRegisterationId");

                    b.ToTable("patientHistory");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisteration", b =>
                {
                    b.Property<int>("PatientRegisterationId")
                        .HasColumnName("patientRegisterationID");

                    b.Property<int?>("Age")
                        .IsRequired();

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("DoctorId")
                        .IsRequired()
                        .HasColumnName("doctorID");

                    b.Property<int?>("PatientId")
                        .IsRequired()
                        .HasColumnName("patientID");

                    b.Property<decimal?>("RgisterationFee")
                        .IsRequired()
                        .HasColumnName("rgisterationFee")
                        .HasColumnType("decimal(7, 2)");

                    b.HasKey("PatientRegisterationId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("patientRegisteration");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationCheck", b =>
                {
                    b.Property<int>("PatientRegisterationCheckId")
                        .HasColumnName("patientRegisterationCheckID");

                    b.Property<DateTime?>("CheckDate")
                        .IsRequired()
                        .HasColumnName("checkDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note");

                    b.Property<int?>("PatientRegisterationId")
                        .HasColumnName("patientRegisterationID");

                    b.Property<int?>("StudentId")
                        .IsRequired();

                    b.HasKey("PatientRegisterationCheckId");

                    b.HasIndex("PatientRegisterationId");

                    b.HasIndex("StudentId");

                    b.ToTable("patientRegisterationCheck");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationCheckDrug", b =>
                {
                    b.Property<int>("PatientRegisterationCheckDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientRegisterationCheckDrugID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugElementId")
                        .HasColumnName("drugElementID");

                    b.Property<int?>("PatientRegisterationCheckId")
                        .HasColumnName("patientRegisterationCheckID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("PatientRegisterationCheckDrugId");

                    b.HasIndex("DrugElementId");

                    b.HasIndex("PatientRegisterationCheckId");

                    b.ToTable("patientRegisterationCheckDrug");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationCheckFeeElement", b =>
                {
                    b.Property<int>("PatientRegisterationCheckFeeElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientRegisterationCheckFeeElementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("FeeElementId")
                        .HasColumnName("feeElementID");

                    b.Property<int?>("PatientRegisterationCheckId")
                        .HasColumnName("patientRegisterationCheckID");

                    b.HasKey("PatientRegisterationCheckFeeElementId");

                    b.ToTable("patientRegisterationCheckFeeElement");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationPayment", b =>
                {
                    b.Property<int>("PatientRegisterationPaymentId")
                        .HasColumnName("patientRegisterationPaymentID");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<decimal?>("DrugTotal")
                        .HasColumnName("drugTotal")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<decimal?>("FeeTotal")
                        .HasColumnName("feeTotal")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("PatientRegisterationCheckId")
                        .HasColumnName("patientRegisterationCheckID");

                    b.Property<decimal?>("Payed")
                        .IsRequired()
                        .HasColumnType("decimal(7, 2)");

                    b.HasKey("PatientRegisterationPaymentId");

                    b.HasIndex("PatientRegisterationCheckId");

                    b.ToTable("patientRegisterationPayment");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientTeeth", b =>
                {
                    b.Property<int>("PatientTeethId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientTeethID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note");

                    b.Property<int?>("PatientRegisterationId")
                        .HasColumnName("patientRegisterationID");

                    b.Property<int?>("TeethNumberId")
                        .HasColumnName("teethNumberID");

                    b.HasKey("PatientTeethId");

                    b.HasIndex("PatientRegisterationId");

                    b.HasIndex("TeethNumberId");

                    b.ToTable("patientTeeth");
                });

            modelBuilder.Entity("DentalClinic.Models.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("semesterID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("SemesterId");

                    b.ToTable("semester");
                });

            modelBuilder.Entity("DentalClinic.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sessionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte?>("Status")
                        .IsRequired();

                    b.HasKey("SessionId");

                    b.ToTable("session");
                });

            modelBuilder.Entity("DentalClinic.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnName("studentID");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnName("fatherName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("StudentId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("DentalClinic.Models.StudentGroup", b =>
                {
                    b.Property<int>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("studentGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("StudentGroupId");

                    b.ToTable("studentGroup");
                });

            modelBuilder.Entity("DentalClinic.Models.StudentSessionGroupDoctor", b =>
                {
                    b.Property<int>("StudentSessionGroupDoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentSessionGroupDoctorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoctorId")
                        .IsRequired()
                        .HasColumnName("doctorID");

                    b.Property<int?>("Duration")
                        .IsRequired();

                    b.Property<int?>("GroupId")
                        .IsRequired()
                        .HasColumnName("groupID");

                    b.Property<int?>("SemesterId")
                        .IsRequired()
                        .HasColumnName("semesterID");

                    b.Property<int?>("SessionId")
                        .IsRequired()
                        .HasColumnName("sessionID");

                    b.Property<int?>("StudentId")
                        .HasColumnName("studentID");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnName("subjectID");

                    b.HasKey("StudentSessionGroupDoctorId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSessionGroupDoctor");
                });

            modelBuilder.Entity("DentalClinic.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("subjectID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("SubjectId");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("DentalClinic.Models.TeethNumber", b =>
                {
                    b.Property<int>("TeethNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teethNumberID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AduOrChd")
                        .IsRequired()
                        .HasColumnName("aduOrChd")
                        .HasMaxLength(50);

                    b.Property<string>("LeftOrRight")
                        .IsRequired()
                        .HasColumnName("leftOrRight")
                        .HasMaxLength(50);

                    b.Property<int?>("Number")
                        .IsRequired();

                    b.Property<string>("TopOrButtom")
                        .IsRequired()
                        .HasColumnName("topOrButtom")
                        .HasMaxLength(50);

                    b.HasKey("TeethNumberId");

                    b.ToTable("teethNumber");
                });

            modelBuilder.Entity("DentalClinic.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DentalClinic.Models.DrugElement", b =>
                {
                    b.HasOne("DentalClinic.Models.Company", "Company")
                        .WithMany("DrugElement")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__drugEleme__compa__08B54D69")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.DrugType", "DrugType")
                        .WithMany("DrugElement")
                        .HasForeignKey("DrugTypeId")
                        .HasConstraintName("FK__drugEleme__drugT__09A971A2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.FeeElement", b =>
                {
                    b.HasOne("DentalClinic.Models.FeeType", "FeeType")
                        .WithMany("FeeElement")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK__feeElemen__feeTy__07C12930")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.HistoryElement", b =>
                {
                    b.HasOne("DentalClinic.Models.Gender", "ApplyToGenderNavigation")
                        .WithMany("HistoryElement")
                        .HasForeignKey("ApplyToGender")
                        .HasConstraintName("FK__historyEl__apply__361203C5")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.Patient", b =>
                {
                    b.HasOne("DentalClinic.Models.Gender", "Gender")
                        .WithMany("Patient")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK__patient__genderI__12C8C788")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.PatientCheckFee", b =>
                {
                    b.HasOne("DentalClinic.Models.FeeElement", "FeeElement")
                        .WithMany("PatientCheckFee")
                        .HasForeignKey("FeeElementId")
                        .HasConstraintName("FK__patientCh__feeEl__0D7A0286");

                    b.HasOne("DentalClinic.Models.PatientRegisterationCheck", "PatientRegisterationCheck")
                        .WithMany("PatientCheckFee")
                        .HasForeignKey("PatientRegisterationCheckId")
                        .HasConstraintName("FK__patientCh__patie__0E6E26BF");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientHistory", b =>
                {
                    b.HasOne("DentalClinic.Models.HistoryElement", "HistoryElement")
                        .WithMany("PatientHistory")
                        .HasForeignKey("HistoryElementId")
                        .HasConstraintName("FK__patientHi__histo__03F0984C");

                    b.HasOne("DentalClinic.Models.PatientRegisteration", "PatientRegisteration")
                        .WithMany("PatientHistory")
                        .HasForeignKey("PatientRegisterationId")
                        .HasConstraintName("FK__patientHi__patie__02FC7413");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisteration", b =>
                {
                    b.HasOne("DentalClinic.Models.Doctor", "Doctor")
                        .WithMany("PatientRegisteration")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__patientRe__docto__114A936A")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.Patient", "Patient")
                        .WithMany("PatientRegisteration")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__patientRe__patie__10566F31")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationCheck", b =>
                {
                    b.HasOne("DentalClinic.Models.PatientRegisteration", "PatientRegisteration")
                        .WithMany("PatientRegisterationCheck")
                        .HasForeignKey("PatientRegisterationId")
                        .HasConstraintName("FK__patientRe__patie__0C85DE4D");

                    b.HasOne("DentalClinic.Models.Student")
                        .WithMany("PatientRegisterationCheck")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationCheckDrug", b =>
                {
                    b.HasOne("DentalClinic.Models.DrugElement", "DrugElement")
                        .WithMany("PatientRegisterationCheckDrug")
                        .HasForeignKey("DrugElementId")
                        .HasConstraintName("FK__patientRe__drugE__6FE99F9F");

                    b.HasOne("DentalClinic.Models.PatientRegisterationCheck", "PatientRegisterationCheck")
                        .WithMany("PatientRegisterationCheckDrug")
                        .HasForeignKey("PatientRegisterationCheckId")
                        .HasConstraintName("FK__patientRe__patie__01142BA1");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientRegisterationPayment", b =>
                {
                    b.HasOne("DentalClinic.Models.PatientRegisterationCheck", "PatientRegisterationCheck")
                        .WithMany("PatientRegisterationPayment")
                        .HasForeignKey("PatientRegisterationCheckId")
                        .HasConstraintName("FK__patientRe__patie__0F624AF8");
                });

            modelBuilder.Entity("DentalClinic.Models.PatientTeeth", b =>
                {
                    b.HasOne("DentalClinic.Models.PatientRegisteration", "PatientRegisteration")
                        .WithMany("PatientTeeth")
                        .HasForeignKey("PatientRegisterationId")
                        .HasConstraintName("FK__patientTe__patie__123EB7A3");

                    b.HasOne("DentalClinic.Models.TeethNumber", "TeethNumber")
                        .WithMany("PatientTeeth")
                        .HasForeignKey("TeethNumberId")
                        .HasConstraintName("FK__patientTe__teeth__1332DBDC");
                });

            modelBuilder.Entity("DentalClinic.Models.StudentSessionGroupDoctor", b =>
                {
                    b.HasOne("DentalClinic.Models.Doctor", "Doctor")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__StudentSe__docto__7A3223E8")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.StudentGroup", "Group")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__StudentSe__group__793DFFAF")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.Semester", "Semester")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK__StudentSe__semes__2CBDA3B5")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.Session", "Session")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK__StudentSe__sessi__7755B73D")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalClinic.Models.Student", "Student")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__StudentSe__stude__7849DB76");

                    b.HasOne("DentalClinic.Models.Subject", "Subject")
                        .WithMany("StudentSessionGroupDoctor")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK__StudentSe__subje__3FD07829")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
